{"ast":null,"code":"var _jsxFileName = \"/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/containers/header/Header.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport Greeting from \"../../components/greeting/Greeting\";\nimport Response from \"../../components/response/Response\";\nimport possibilityImage from \"../../assets/header.svg\";\nimport \"./header.css\";\n/* eslint-disable no-plusplus */\n\n/* eslint-disable no-await-in-loop */\n\n/* eslint-disable no-use-before-define */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = () => {\n  _s();\n\n  const [prompt, setPrompt] = useState({\n    text: \"\"\n  });\n  const [responses, setResonses] = useState(\"\");\n  const opactiyToggle = {\n    opactiy: \"100%\"\n  };\n\n  async function requestResponse() {\n    const configuration = new Configuration({\n      // Set up API Key in config for actual project\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY\n    });\n    const openai = new OpenAIApi(configuration);\n    const response = await openai.createCompletion({\n      model: \"text-davinci-002\",\n      prompt: `${prompt.text}`,\n      max_tokens: 200\n    }); // This is how you access the response from the API\n\n    setResonses(response.data.choices[0].text);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gpt3__header gpt3__header-padding\",\n    id: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__header-content\",\n      children: [/*#__PURE__*/_jsxDEV(Greeting, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gpt3__header-content__input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          autoComplete: \"off\",\n          onSubmit: e => {\n            e.preventDefault();\n            requestResponse();\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"prompt\",\n            placeholder: \"Enter a prompt\",\n            value: prompt.text,\n            onChange: e => setPrompt({ ...prompt,\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Magic Stuff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__header-image\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: possibilityImage,\n        style: opactiyToggle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Response, {\n        text: responses\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"ktmlHjRFPlse8gzvdReu668Wy7c=\");\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/containers/header/Header.jsx"],"names":["React","useState","Configuration","OpenAIApi","Greeting","Response","Header","prompt","setPrompt","text","responses","setResonses","opactiyToggle","opactiy","requestResponse","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","response","createCompletion","model","max_tokens","data","choices","e","preventDefault","target","value","possibilityImage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,QAAzC;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,oCAArB;;AAGA,OAAO,cAAP;AACA;;AACA;;AACA;;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAApC;AACA,QAAM,CAACC,SAAD,EAAYC,WAAZ,IAA2BV,QAAQ,CAAC,EAAD,CAAzC;AAEA,QAAMW,aAAa,GAAG;AACpBC,IAAAA,OAAO,EAAE;AADW,GAAtB;;AAIA,iBAAeC,eAAf,GAAiC;AAC/B,UAAMC,aAAa,GAAG,IAAIb,aAAJ,CAAkB;AACtC;AACAc,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFkB,KAAlB,CAAtB;AAKA,UAAMC,MAAM,GAAG,IAAIjB,SAAJ,CAAcY,aAAd,CAAf;AACA,UAAMM,QAAQ,GAAG,MAAMD,MAAM,CAACE,gBAAP,CAAwB;AAC7CC,MAAAA,KAAK,EAAE,kBADsC;AAE7ChB,MAAAA,MAAM,EAAG,GAAEA,MAAM,CAACE,IAAK,EAFsB;AAG7Ce,MAAAA,UAAU,EAAE;AAHiC,KAAxB,CAAvB,CAP+B,CAY/B;;AACAb,IAAAA,WAAW,CAACU,QAAQ,CAACI,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBjB,IAA1B,CAAX;AACD;;AACD,sBACE;AAAK,IAAA,SAAS,EAAC,mCAAf;AAAmD,IAAA,EAAE,EAAC,MAAtD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,+BACE;AACE,UAAA,YAAY,EAAC,KADf;AAEE,UAAA,QAAQ,EAAGkB,CAAD,IAAO;AACfA,YAAAA,CAAC,CAACC,cAAF;AAEAd,YAAAA,eAAe;AAChB,WANH;AAAA,kCAQE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,WAAW,EAAC,gBAHd;AAIE,YAAA,KAAK,EAAEP,MAAM,CAACE,IAJhB;AAKE,YAAA,QAAQ,EAAGkB,CAAD,IAAOnB,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaE,cAAAA,IAAI,EAAEkB,CAAC,CAACE,MAAF,CAASC;AAA5B,aAAD;AAL5B;AAAA;AAAA;AAAA;AAAA,kBARF,eAeE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAfF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAwBE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEC,gBAAV;AAA4B,QAAA,KAAK,EAAEnB;AAAnC;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,QAAD;AAAU,QAAA,IAAI,EAAEF;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAtDD;;GAAMJ,M;;KAAAA,M;AAwDN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport Greeting from \"../../components/greeting/Greeting\";\nimport Response from \"../../components/response/Response\";\n\nimport possibilityImage from \"../../assets/header.svg\";\nimport \"./header.css\";\n/* eslint-disable no-plusplus */\n/* eslint-disable no-await-in-loop */\n/* eslint-disable no-use-before-define */\n\nconst Header = () => {\n  const [prompt, setPrompt] = useState({ text: \"\" });\n  const [responses, setResonses] = useState(\"\");\n\n  const opactiyToggle = {\n    opactiy: \"100%\",\n  };\n\n  async function requestResponse() {\n    const configuration = new Configuration({\n      // Set up API Key in config for actual project\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    });\n\n    const openai = new OpenAIApi(configuration);\n    const response = await openai.createCompletion({\n      model: \"text-davinci-002\",\n      prompt: `${prompt.text}`,\n      max_tokens: 200,\n    });\n    // This is how you access the response from the API\n    setResonses(response.data.choices[0].text);\n  }\n  return (\n    <div className=\"gpt3__header gpt3__header-padding\" id=\"home\">\n      <div className=\"gpt3__header-content\">\n        <Greeting />\n        <div className=\"gpt3__header-content__input\">\n          <form\n            autoComplete=\"off\"\n            onSubmit={(e) => {\n              e.preventDefault();\n\n              requestResponse();\n            }}\n          >\n            <input\n              type=\"text\"\n              name=\"prompt\"\n              placeholder=\"Enter a prompt\"\n              value={prompt.text}\n              onChange={(e) => setPrompt({ ...prompt, text: e.target.value })}\n            />\n            <button type=\"submit\">Magic Stuff</button>\n          </form>\n        </div>\n      </div>\n\n      <div className=\"gpt3__header-image\">\n        <img src={possibilityImage} style={opactiyToggle} />\n        <Response text={responses} />\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}