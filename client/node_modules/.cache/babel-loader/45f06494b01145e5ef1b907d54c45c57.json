{"ast":null,"code":"\"use strict\";\n/* tslint:disable */\n\n/* eslint-disable */\n\n/**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.0.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = void 0;\n\nconst axios_1 = require(\"axios\"); // Some imports not used depending on template conditions\n// @ts-ignore\n\n\nconst common_1 = require(\"./common\"); // @ts-ignore\n\n\nconst base_1 = require(\"./base\");\n/**\n * OpenAIApi - axios parameter creator\n * @export\n */\n\n\nexports.OpenAIApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fineTuneId' is not null or undefined\n      common_1.assertParamExists('cancelFineTune', 'fineTuneId', fineTuneId);\n      const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer: (createAnswerRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createAnswerRequest' is not null or undefined\n      common_1.assertParamExists('createAnswer', 'createAnswerRequest', createAnswerRequest);\n      const localVarPath = `/answers`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification: (createClassificationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createClassificationRequest' is not null or undefined\n      common_1.assertParamExists('createClassification', 'createClassificationRequest', createClassificationRequest);\n      const localVarPath = `/classifications`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion: (createCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createCompletionRequest' is not null or undefined\n      common_1.assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest);\n      const localVarPath = `/completions`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit: (createEditRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createEditRequest' is not null or undefined\n      common_1.assertParamExists('createEdit', 'createEditRequest', createEditRequest);\n      const localVarPath = `/edits`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding: (createEmbeddingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createEmbeddingRequest' is not null or undefined\n      common_1.assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest);\n      const localVarPath = `/embeddings`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile: (file, purpose, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'file' is not null or undefined\n      common_1.assertParamExists('createFile', 'file', file); // verify required parameter 'purpose' is not null or undefined\n\n      common_1.assertParamExists('createFile', 'purpose', purpose);\n      const localVarPath = `/files`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n\n      if (file !== undefined) {\n        localVarFormParams.append('file', file);\n      }\n\n      if (purpose !== undefined) {\n        localVarFormParams.append('purpose', purpose);\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = localVarFormParams;\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune: (createFineTuneRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'createFineTuneRequest' is not null or undefined\n      common_1.assertParamExists('createFineTune', 'createFineTuneRequest', createFineTuneRequest);\n      const localVarPath = `/fine-tunes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch: (engineId, createSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'engineId' is not null or undefined\n      common_1.assertParamExists('createSearch', 'engineId', engineId); // verify required parameter 'createSearchRequest' is not null or undefined\n\n      common_1.assertParamExists('createSearch', 'createSearchRequest', createSearchRequest);\n      const localVarPath = `/engines/{engine_id}/search`.replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fileId' is not null or undefined\n      common_1.assertParamExists('deleteFile', 'fileId', fileId);\n      const localVarPath = `/files/{file_id}`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'DELETE'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'model' is not null or undefined\n      common_1.assertParamExists('deleteModel', 'model', model);\n      const localVarPath = `/models/{model}`.replace(`{${\"model\"}}`, encodeURIComponent(String(model))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'DELETE'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fileId' is not null or undefined\n      common_1.assertParamExists('downloadFile', 'fileId', fileId);\n      const localVarPath = `/files/{file_id}/content`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n      const localVarPath = `/engines`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n      const localVarPath = `/files`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents: (fineTuneId, stream, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fineTuneId' is not null or undefined\n      common_1.assertParamExists('listFineTuneEvents', 'fineTuneId', fineTuneId);\n      const localVarPath = `/fine-tunes/{fine_tune_id}/events`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n\n      if (stream !== undefined) {\n        localVarQueryParameter['stream'] = stream;\n      }\n\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n      const localVarPath = `/fine-tunes`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n      const localVarPath = `/models`; // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine: (engineId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'engineId' is not null or undefined\n      common_1.assertParamExists('retrieveEngine', 'engineId', engineId);\n      const localVarPath = `/engines/{engine_id}`.replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fileId' is not null or undefined\n      common_1.assertParamExists('retrieveFile', 'fileId', fileId);\n      const localVarPath = `/files/{file_id}`.replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'fineTuneId' is not null or undefined\n      common_1.assertParamExists('retrieveFineTune', 'fineTuneId', fineTuneId);\n      const localVarPath = `/fine-tunes/{fine_tune_id}`.replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'model' is not null or undefined\n      common_1.assertParamExists('retrieveModel', 'model', model);\n      const localVarPath = `/models/{model}`.replace(`{${\"model\"}}`, encodeURIComponent(String(model))); // use dummy base URL string because the URL constructor only accepts absolute URLs.\n\n      const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n      let baseOptions;\n\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: common_1.toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * OpenAIApi - functional programming interface\n * @export\n */\n\n\nexports.OpenAIApiFp = function (configuration) {\n  const localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune(fineTuneId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer(createAnswerRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification(createClassificationRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion(createCompletionRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit(createEditRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding(createEmbeddingRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile(file, purpose, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune(createFineTuneRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch(engineId, createSearchRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel(model, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents(fineTuneId, stream, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels(options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine(engineId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile(fileId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune(fineTuneId, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    },\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel(model, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options);\n        return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n      });\n    }\n\n  };\n};\n/**\n * OpenAIApi - factory interface\n * @export\n */\n\n\nexports.OpenAIApiFactory = function (configuration, basePath, axios) {\n  const localVarFp = exports.OpenAIApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    cancelFineTune(fineTuneId, options) {\n      return localVarFp.cancelFineTune(fineTuneId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createAnswer(createAnswerRequest, options) {\n      return localVarFp.createAnswer(createAnswerRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createClassification(createClassificationRequest, options) {\n      return localVarFp.createClassification(createClassificationRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createCompletion(createCompletionRequest, options) {\n      return localVarFp.createCompletion(createCompletionRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEdit(createEditRequest, options) {\n      return localVarFp.createEdit(createEditRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createEmbedding(createEmbeddingRequest, options) {\n      return localVarFp.createEmbedding(createEmbeddingRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFile(file, purpose, options) {\n      return localVarFp.createFile(file, purpose, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    createFineTune(createFineTuneRequest, options) {\n      return localVarFp.createFineTune(createFineTuneRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    createSearch(engineId, createSearchRequest, options) {\n      return localVarFp.createSearch(engineId, createSearchRequest, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteFile(fileId, options) {\n      return localVarFp.deleteFile(fileId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    deleteModel(model, options) {\n      return localVarFp.deleteModel(model, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    downloadFile(fileId, options) {\n      return localVarFp.downloadFile(fileId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    listEngines(options) {\n      return localVarFp.listEngines(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFiles(options) {\n      return localVarFp.listFiles(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTuneEvents(fineTuneId, stream, options) {\n      return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listFineTunes(options) {\n      return localVarFp.listFineTunes(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    listModels(options) {\n      return localVarFp.listModels(options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     */\n    retrieveEngine(engineId, options) {\n      return localVarFp.retrieveEngine(engineId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFile(fileId, options) {\n      return localVarFp.retrieveFile(fileId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveFineTune(fineTuneId, options) {\n      return localVarFp.retrieveFineTune(fineTuneId, options).then(request => request(axios, basePath));\n    },\n\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    retrieveModel(model, options) {\n      return localVarFp.retrieveModel(model, options).then(request => request(axios, basePath));\n    }\n\n  };\n};\n/**\n * OpenAIApi - object-oriented interface\n * @export\n * @class OpenAIApi\n * @extends {BaseAPI}\n */\n\n\nclass OpenAIApi extends base_1.BaseAPI {\n  /**\n   *\n   * @summary Immediately cancel a fine-tune job.\n   * @param {string} fineTuneId The ID of the fine-tune job to cancel\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n  cancelFineTune(fineTuneId, options) {\n    return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n   * @param {CreateAnswerRequest} createAnswerRequest\n   * @param {*} [options] Override http request option.\n   * @deprecated\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createAnswer(createAnswerRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n   * @param {CreateClassificationRequest} createClassificationRequest\n   * @param {*} [options] Override http request option.\n   * @deprecated\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createClassification(createClassificationRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Creates a completion for the provided prompt and parameters\n   * @param {CreateCompletionRequest} createCompletionRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createCompletion(createCompletionRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Creates a new edit for the provided input, instruction, and parameters\n   * @param {CreateEditRequest} createEditRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createEdit(createEditRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Creates an embedding vector representing the input text.\n   * @param {CreateEmbeddingRequest} createEmbeddingRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createEmbedding(createEmbeddingRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n   * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n   * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createFile(file, purpose, options) {\n    return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n   * @param {CreateFineTuneRequest} createFineTuneRequest\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createFineTune(createFineTuneRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n   * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n   * @param {CreateSearchRequest} createSearchRequest\n   * @param {*} [options] Override http request option.\n   * @deprecated\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  createSearch(engineId, createSearchRequest, options) {\n    return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Delete a file.\n   * @param {string} fileId The ID of the file to use for this request\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  deleteFile(fileId, options) {\n    return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n   * @param {string} model The model to delete\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  deleteModel(model, options) {\n    return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Returns the contents of the specified file\n   * @param {string} fileId The ID of the file to use for this request\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  downloadFile(fileId, options) {\n    return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n   * @param {*} [options] Override http request option.\n   * @deprecated\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  listEngines(options) {\n    return exports.OpenAIApiFp(this.configuration).listEngines(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Returns a list of files that belong to the user\\'s organization.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  listFiles(options) {\n    return exports.OpenAIApiFp(this.configuration).listFiles(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Get fine-grained status updates for a fine-tune job.\n   * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n   * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  listFineTuneEvents(fineTuneId, stream, options) {\n    return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary List your organization\\'s fine-tuning jobs\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  listFineTunes(options) {\n    return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  listModels(options) {\n    return exports.OpenAIApiFp(this.configuration).listModels(options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n   * @param {string} engineId The ID of the engine to use for this request\n   * @param {*} [options] Override http request option.\n   * @deprecated\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  retrieveEngine(engineId, options) {\n    return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Returns information about a specific file.\n   * @param {string} fileId The ID of the file to use for this request\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  retrieveFile(fileId, options) {\n    return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n   * @param {string} fineTuneId The ID of the fine-tune job\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  retrieveFineTune(fineTuneId, options) {\n    return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then(request => request(this.axios, this.basePath));\n  }\n  /**\n   *\n   * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n   * @param {string} model The ID of the model to use for this request\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OpenAIApi\n   */\n\n\n  retrieveModel(model, options) {\n    return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then(request => request(this.axios, this.basePath));\n  }\n\n}\n\nexports.OpenAIApi = OpenAIApi;","map":{"version":3,"sources":["/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/node_modules/openai/dist/api.js"],"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Object","defineProperty","exports","OpenAIApi","OpenAIApiFactory","OpenAIApiFp","OpenAIApiAxiosParamCreator","axios_1","require","common_1","base_1","configuration","cancelFineTune","fineTuneId","options","assertParamExists","localVarPath","replace","encodeURIComponent","String","localVarUrlObj","URL","DUMMY_BASE_URL","baseOptions","localVarRequestOptions","assign","method","localVarHeaderParameter","localVarQueryParameter","setSearchParams","headersFromBaseOptions","headers","url","toPathString","createAnswer","createAnswerRequest","data","serializeDataIfNeeded","createClassification","createClassificationRequest","createCompletion","createCompletionRequest","createEdit","createEditRequest","createEmbedding","createEmbeddingRequest","createFile","file","purpose","localVarFormParams","formDataCtor","FormData","undefined","append","getHeaders","createFineTune","createFineTuneRequest","createSearch","engineId","createSearchRequest","deleteFile","fileId","deleteModel","model","downloadFile","listEngines","listFiles","listFineTuneEvents","stream","listFineTunes","listModels","retrieveEngine","retrieveFile","retrieveFineTune","retrieveModel","localVarAxiosParamCreator","localVarAxiosArgs","createRequestFunction","default","BASE_PATH","basePath","axios","localVarFp","request","BaseAPI"],"mappings":"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","sourcesContent":["\"use strict\";\n/* tslint:disable */\n/* eslint-disable */\n/**\n * OpenAI API\n * APIs for sampling from and fine-tuning language models\n *\n * The version of the OpenAPI document: 1.0.5\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.OpenAIApi = exports.OpenAIApiFactory = exports.OpenAIApiFp = exports.OpenAIApiAxiosParamCreator = void 0;\nconst axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nconst common_1 = require(\"./common\");\n// @ts-ignore\nconst base_1 = require(\"./base\");\n/**\n * OpenAIApi - axios parameter creator\n * @export\n */\nexports.OpenAIApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('cancelFineTune', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}/cancel`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer: (createAnswerRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createAnswerRequest' is not null or undefined\n            common_1.assertParamExists('createAnswer', 'createAnswerRequest', createAnswerRequest);\n            const localVarPath = `/answers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createAnswerRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification: (createClassificationRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createClassificationRequest' is not null or undefined\n            common_1.assertParamExists('createClassification', 'createClassificationRequest', createClassificationRequest);\n            const localVarPath = `/classifications`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createClassificationRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion: (createCompletionRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createCompletionRequest' is not null or undefined\n            common_1.assertParamExists('createCompletion', 'createCompletionRequest', createCompletionRequest);\n            const localVarPath = `/completions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createCompletionRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit: (createEditRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createEditRequest' is not null or undefined\n            common_1.assertParamExists('createEdit', 'createEditRequest', createEditRequest);\n            const localVarPath = `/edits`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEditRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding: (createEmbeddingRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createEmbeddingRequest' is not null or undefined\n            common_1.assertParamExists('createEmbedding', 'createEmbeddingRequest', createEmbeddingRequest);\n            const localVarPath = `/embeddings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createEmbeddingRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile: (file, purpose, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'file' is not null or undefined\n            common_1.assertParamExists('createFile', 'file', file);\n            // verify required parameter 'purpose' is not null or undefined\n            common_1.assertParamExists('createFile', 'purpose', purpose);\n            const localVarPath = `/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n            if (file !== undefined) {\n                localVarFormParams.append('file', file);\n            }\n            if (purpose !== undefined) {\n                localVarFormParams.append('purpose', purpose);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), localVarFormParams.getHeaders()), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune: (createFineTuneRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'createFineTuneRequest' is not null or undefined\n            common_1.assertParamExists('createFineTune', 'createFineTuneRequest', createFineTuneRequest);\n            const localVarPath = `/fine-tunes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createFineTuneRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch: (engineId, createSearchRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'engineId' is not null or undefined\n            common_1.assertParamExists('createSearch', 'engineId', engineId);\n            // verify required parameter 'createSearchRequest' is not null or undefined\n            common_1.assertParamExists('createSearch', 'createSearchRequest', createSearchRequest);\n            const localVarPath = `/engines/{engine_id}/search`\n                .replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = common_1.serializeDataIfNeeded(createSearchRequest, localVarRequestOptions, configuration);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('deleteFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'model' is not null or undefined\n            common_1.assertParamExists('deleteModel', 'model', model);\n            const localVarPath = `/models/{model}`\n                .replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('downloadFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}/content`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/engines`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/files`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents: (fineTuneId, stream, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('listFineTuneEvents', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}/events`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            if (stream !== undefined) {\n                localVarQueryParameter['stream'] = stream;\n            }\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/fine-tunes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels: (options = {}) => __awaiter(this, void 0, void 0, function* () {\n            const localVarPath = `/models`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine: (engineId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'engineId' is not null or undefined\n            common_1.assertParamExists('retrieveEngine', 'engineId', engineId);\n            const localVarPath = `/engines/{engine_id}`\n                .replace(`{${\"engine_id\"}}`, encodeURIComponent(String(engineId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile: (fileId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fileId' is not null or undefined\n            common_1.assertParamExists('retrieveFile', 'fileId', fileId);\n            const localVarPath = `/files/{file_id}`\n                .replace(`{${\"file_id\"}}`, encodeURIComponent(String(fileId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune: (fineTuneId, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'fineTuneId' is not null or undefined\n            common_1.assertParamExists('retrieveFineTune', 'fineTuneId', fineTuneId);\n            const localVarPath = `/fine-tunes/{fine_tune_id}`\n                .replace(`{${\"fine_tune_id\"}}`, encodeURIComponent(String(fineTuneId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel: (model, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'model' is not null or undefined\n            common_1.assertParamExists('retrieveModel', 'model', model);\n            const localVarPath = `/models/{model}`\n                .replace(`{${\"model\"}}`, encodeURIComponent(String(model)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            common_1.setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: common_1.toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * OpenAIApi - functional programming interface\n * @export\n */\nexports.OpenAIApiFp = function (configuration) {\n    const localVarAxiosParamCreator = exports.OpenAIApiAxiosParamCreator(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune(fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.cancelFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer(createAnswerRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createAnswer(createAnswerRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification(createClassificationRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createClassification(createClassificationRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion(createCompletionRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createCompletion(createCompletionRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit(createEditRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEdit(createEditRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding(createEmbeddingRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createEmbedding(createEmbeddingRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(file, purpose, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFile(file, purpose, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune(createFineTuneRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createFineTune(createFineTuneRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch(engineId, createSearchRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.createSearch(engineId, createSearchRequest, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel(model, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.deleteModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.downloadFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listEngines(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFiles(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents(fineTuneId, stream, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTuneEvents(fineTuneId, stream, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listFineTunes(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels(options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.listModels(options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine(engineId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveEngine(engineId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile(fileId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFile(fileId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune(fineTuneId, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveFineTune(fineTuneId, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel(model, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.retrieveModel(model, options);\n                return common_1.createRequestFunction(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration);\n            });\n        },\n    };\n};\n/**\n * OpenAIApi - factory interface\n * @export\n */\nexports.OpenAIApiFactory = function (configuration, basePath, axios) {\n    const localVarFp = exports.OpenAIApiFp(configuration);\n    return {\n        /**\n         *\n         * @summary Immediately cancel a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to cancel\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        cancelFineTune(fineTuneId, options) {\n            return localVarFp.cancelFineTune(fineTuneId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n         * @param {CreateAnswerRequest} createAnswerRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createAnswer(createAnswerRequest, options) {\n            return localVarFp.createAnswer(createAnswerRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n         * @param {CreateClassificationRequest} createClassificationRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createClassification(createClassificationRequest, options) {\n            return localVarFp.createClassification(createClassificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a completion for the provided prompt and parameters\n         * @param {CreateCompletionRequest} createCompletionRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCompletion(createCompletionRequest, options) {\n            return localVarFp.createCompletion(createCompletionRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a new edit for the provided input, instruction, and parameters\n         * @param {CreateEditRequest} createEditRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEdit(createEditRequest, options) {\n            return localVarFp.createEdit(createEditRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates an embedding vector representing the input text.\n         * @param {CreateEmbeddingRequest} createEmbeddingRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createEmbedding(createEmbeddingRequest, options) {\n            return localVarFp.createEmbedding(createEmbeddingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n         * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n         * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFile(file, purpose, options) {\n            return localVarFp.createFile(file, purpose, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {CreateFineTuneRequest} createFineTuneRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createFineTune(createFineTuneRequest, options) {\n            return localVarFp.createFineTune(createFineTuneRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n         * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n         * @param {CreateSearchRequest} createSearchRequest\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        createSearch(engineId, createSearchRequest, options) {\n            return localVarFp.createSearch(engineId, createSearchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteFile(fileId, options) {\n            return localVarFp.deleteFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n         * @param {string} model The model to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteModel(model, options) {\n            return localVarFp.deleteModel(model, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns the contents of the specified file\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        downloadFile(fileId, options) {\n            return localVarFp.downloadFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        listEngines(options) {\n            return localVarFp.listEngines(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns a list of files that belong to the user\\'s organization.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFiles(options) {\n            return localVarFp.listFiles(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Get fine-grained status updates for a fine-tune job.\n         * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n         * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTuneEvents(fineTuneId, stream, options) {\n            return localVarFp.listFineTuneEvents(fineTuneId, stream, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary List your organization\\'s fine-tuning jobs\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listFineTunes(options) {\n            return localVarFp.listFineTunes(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listModels(options) {\n            return localVarFp.listModels(options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n         * @param {string} engineId The ID of the engine to use for this request\n         * @param {*} [options] Override http request option.\n         * @deprecated\n         * @throws {RequiredError}\n         */\n        retrieveEngine(engineId, options) {\n            return localVarFp.retrieveEngine(engineId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Returns information about a specific file.\n         * @param {string} fileId The ID of the file to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFile(fileId, options) {\n            return localVarFp.retrieveFile(fileId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n         * @param {string} fineTuneId The ID of the fine-tune job\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveFineTune(fineTuneId, options) {\n            return localVarFp.retrieveFineTune(fineTuneId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         *\n         * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n         * @param {string} model The ID of the model to use for this request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        retrieveModel(model, options) {\n            return localVarFp.retrieveModel(model, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n/**\n * OpenAIApi - object-oriented interface\n * @export\n * @class OpenAIApi\n * @extends {BaseAPI}\n */\nclass OpenAIApi extends base_1.BaseAPI {\n    /**\n     *\n     * @summary Immediately cancel a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to cancel\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    cancelFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).cancelFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Answers the specified question using the provided documents and examples.  The endpoint first [searches](/docs/api-reference/searches) over provided documents or files to find relevant context. The relevant context is combined with the provided examples and question to create the prompt for [completion](/docs/api-reference/completions).\n     * @param {CreateAnswerRequest} createAnswerRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createAnswer(createAnswerRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createAnswer(createAnswerRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Classifies the specified `query` using provided examples.  The endpoint first [searches](/docs/api-reference/searches) over the labeled examples to select the ones most relevant for the particular query. Then, the relevant examples are combined with the query to construct a prompt to produce the final label via the [completions](/docs/api-reference/completions) endpoint.  Labeled examples can be provided via an uploaded `file`, or explicitly listed in the request using the `examples` parameter for quick tests and small scale use cases.\n     * @param {CreateClassificationRequest} createClassificationRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createClassification(createClassificationRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createClassification(createClassificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a completion for the provided prompt and parameters\n     * @param {CreateCompletionRequest} createCompletionRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createCompletion(createCompletionRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createCompletion(createCompletionRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a new edit for the provided input, instruction, and parameters\n     * @param {CreateEditRequest} createEditRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createEdit(createEditRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEdit(createEditRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates an embedding vector representing the input text.\n     * @param {CreateEmbeddingRequest} createEmbeddingRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createEmbedding(createEmbeddingRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createEmbedding(createEmbeddingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Upload a file that contains document(s) to be used across various endpoints/features. Currently, the size of all the files uploaded by one organization can be up to 1 GB. Please contact us if you need to increase the storage limit.\n     * @param {any} file Name of the [JSON Lines](https://jsonlines.readthedocs.io/en/latest/) file to be uploaded.  If the &#x60;purpose&#x60; is set to \\\\\\&quot;fine-tune\\\\\\&quot;, each line is a JSON record with \\\\\\&quot;prompt\\\\\\&quot; and \\\\\\&quot;completion\\\\\\&quot; fields representing your [training examples](/docs/guides/fine-tuning/prepare-training-data).\n     * @param {string} purpose The intended purpose of the uploaded documents.  Use \\\\\\&quot;fine-tune\\\\\\&quot; for [Fine-tuning](/docs/api-reference/fine-tunes). This allows us to validate the format of the uploaded file.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createFile(file, purpose, options) {\n        return exports.OpenAIApiFp(this.configuration).createFile(file, purpose, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Creates a job that fine-tunes a specified model from a given dataset.  Response includes details of the enqueued job including job status and the name of the fine-tuned models once complete.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {CreateFineTuneRequest} createFineTuneRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createFineTune(createFineTuneRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createFineTune(createFineTuneRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary The search endpoint computes similarity scores between provided query and documents. Documents can be passed directly to the API if there are no more than 200 of them.  To go beyond the 200 document limit, documents can be processed offline and then used for efficient retrieval at query time. When `file` is set, the search endpoint searches over all the documents in the given file and returns up to the `max_rerank` number of documents. These documents will be returned along with their search scores.  The similarity score is a positive score that usually ranges from 0 to 300 (but can sometimes go higher), where a score above 200 usually means the document is semantically similar to the query.\n     * @param {string} engineId The ID of the engine to use for this request.  You can select one of &#x60;ada&#x60;, &#x60;babbage&#x60;, &#x60;curie&#x60;, or &#x60;davinci&#x60;.\n     * @param {CreateSearchRequest} createSearchRequest\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    createSearch(engineId, createSearchRequest, options) {\n        return exports.OpenAIApiFp(this.configuration).createSearch(engineId, createSearchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    deleteFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Delete a fine-tuned model. You must have the Owner role in your organization.\n     * @param {string} model The model to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    deleteModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).deleteModel(model, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns the contents of the specified file\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    downloadFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).downloadFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available (non-finetuned) models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listEngines(options) {\n        return exports.OpenAIApiFp(this.configuration).listEngines(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns a list of files that belong to the user\\'s organization.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFiles(options) {\n        return exports.OpenAIApiFp(this.configuration).listFiles(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Get fine-grained status updates for a fine-tune job.\n     * @param {string} fineTuneId The ID of the fine-tune job to get events for.\n     * @param {boolean} [stream] Whether to stream events for the fine-tune job. If set to true, events will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message when the job is finished (succeeded, cancelled, or failed).  If set to false, only events generated so far will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFineTuneEvents(fineTuneId, stream, options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTuneEvents(fineTuneId, stream, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary List your organization\\'s fine-tuning jobs\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listFineTunes(options) {\n        return exports.OpenAIApiFp(this.configuration).listFineTunes(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Lists the currently available models, and provides basic information about each one such as the owner and availability.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    listModels(options) {\n        return exports.OpenAIApiFp(this.configuration).listModels(options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about it such as the owner and availability.\n     * @param {string} engineId The ID of the engine to use for this request\n     * @param {*} [options] Override http request option.\n     * @deprecated\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveEngine(engineId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveEngine(engineId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Returns information about a specific file.\n     * @param {string} fileId The ID of the file to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveFile(fileId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFile(fileId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Gets info about the fine-tune job.  [Learn more about Fine-tuning](/docs/guides/fine-tuning)\n     * @param {string} fineTuneId The ID of the fine-tune job\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveFineTune(fineTuneId, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveFineTune(fineTuneId, options).then((request) => request(this.axios, this.basePath));\n    }\n    /**\n     *\n     * @summary Retrieves a model instance, providing basic information about the model such as the owner and permissioning.\n     * @param {string} model The ID of the model to use for this request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OpenAIApi\n     */\n    retrieveModel(model, options) {\n        return exports.OpenAIApiFp(this.configuration).retrieveModel(model, options).then((request) => request(this.axios, this.basePath));\n    }\n}\nexports.OpenAIApi = OpenAIApi;\n"]},"metadata":{},"sourceType":"script"}