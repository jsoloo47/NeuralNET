{"ast":null,"code":"var _jsxFileName = \"/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/components/typewriter/Typewriter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typewriter = ({\n  text\n}) => {\n  _s();\n\n  const index = useRef(0);\n  const prompt = useRef(0);\n  const [currentText, setCurrentText] = useState(\"\");\n\n  if (index.current < text.length) {\n    if (prompt.current + 1 === text[index.current].length) {\n      index.current += 1;\n      console.log(\"updated index\");\n    }\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      prompt.current = 0;\n      setCurrentText(\"\");\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [index.current]);\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (index.current !== text.length) {\n        if (prompt.current < text[index.current].length) {\n          setCurrentText(value => value + text[index.current][prompt.current]);\n          prompt.current += 1;\n          console.log(index.current, prompt.current);\n        }\n      }\n    }, 100);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [currentText]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: currentText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Typewriter, \"VVrg807xgnlgSl9qQA5VF2SWd7A=\");\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/components/typewriter/Typewriter.jsx"],"names":["React","useEffect","useState","useRef","Typewriter","text","index","prompt","currentText","setCurrentText","current","length","console","log","timeoutId","setTimeout","clearTimeout","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC/B,QAAMC,KAAK,GAAGH,MAAM,CAAC,CAAD,CAApB;AACA,QAAMI,MAAM,GAAGJ,MAAM,CAAC,CAAD,CAArB;AAEA,QAAM,CAACK,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;;AAEA,MAAII,KAAK,CAACI,OAAN,GAAgBL,IAAI,CAACM,MAAzB,EAAiC;AAC/B,QAAIJ,MAAM,CAACG,OAAP,GAAiB,CAAjB,KAAuBL,IAAI,CAACC,KAAK,CAACI,OAAP,CAAJ,CAAoBC,MAA/C,EAAuD;AACrDL,MAAAA,KAAK,CAACI,OAAN,IAAiB,CAAjB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF;;AAEDZ,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,SAAS,GAAGC,UAAU,CAAC,MAAM;AACjCR,MAAAA,MAAM,CAACG,OAAP,GAAiB,CAAjB;AACAD,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAH2B,EAGzB,IAHyB,CAA5B;AAIA,WAAO,MAAM;AACXO,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,CAACR,KAAK,CAACI,OAAP,CARM,CAAT;AAUAT,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMa,SAAS,GAAGC,UAAU,CAAC,MAAM;AACjC,UAAIT,KAAK,CAACI,OAAN,KAAkBL,IAAI,CAACM,MAA3B,EAAmC;AACjC,YAAIJ,MAAM,CAACG,OAAP,GAAiBL,IAAI,CAACC,KAAK,CAACI,OAAP,CAAJ,CAAoBC,MAAzC,EAAiD;AAC/CF,UAAAA,cAAc,CACXQ,KAAD,IAAWA,KAAK,GAAGZ,IAAI,CAACC,KAAK,CAACI,OAAP,CAAJ,CAAoBH,MAAM,CAACG,OAA3B,CADP,CAAd;AAGAH,UAAAA,MAAM,CAACG,OAAP,IAAkB,CAAlB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYP,KAAK,CAACI,OAAlB,EAA2BH,MAAM,CAACG,OAAlC;AACD;AACF;AACF,KAV2B,EAUzB,GAVyB,CAA5B;AAWA,WAAO,MAAM;AACXM,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,KAFD;AAGD,GAfQ,EAeN,CAACN,WAAD,CAfM,CAAT;AAgBA,sBAAO;AAAA,cAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAxCD;;GAAMJ,U;;KAAAA,U;AAyCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst Typewriter = ({ text }) => {\n  const index = useRef(0);\n  const prompt = useRef(0);\n\n  const [currentText, setCurrentText] = useState(\"\");\n\n  if (index.current < text.length) {\n    if (prompt.current + 1 === text[index.current].length) {\n      index.current += 1;\n      console.log(\"updated index\");\n    }\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      prompt.current = 0;\n      setCurrentText(\"\");\n    }, 1000);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [index.current]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (index.current !== text.length) {\n        if (prompt.current < text[index.current].length) {\n          setCurrentText(\n            (value) => value + text[index.current][prompt.current],\n          );\n          prompt.current += 1;\n          console.log(index.current, prompt.current);\n        }\n      }\n    }, 100);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [currentText]);\n  return <p>{currentText}</p>;\n};\nexport default Typewriter;\n"]},"metadata":{},"sourceType":"module"}