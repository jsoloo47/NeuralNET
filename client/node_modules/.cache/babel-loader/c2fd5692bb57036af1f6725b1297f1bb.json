{"ast":null,"code":"var _jsxFileName = \"/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/containers/header/Header.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport Greeting from \"../../components/greeting/Greeting\";\nimport Response from \"../../components/response/Response\";\nimport possibilityImage from \"../../assets/header.svg\";\nimport \"./header.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Header = () => {\n  _s();\n\n  const [prompt, setPrompt] = useState({\n    text: \"\"\n  });\n  const [responses, setResponses] = useState([]);\n  /* eslint-disable no-plusplus */\n\n  /* eslint-disable no-await-in-loop */\n\n  const handleSubmit = async e => {\n    e.preventDefault();\n    const configuration = new Configuration({\n      // Set up API Key in config for actual project\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY\n    });\n    const openai = new OpenAIApi(configuration);\n    const aiText = [];\n\n    for (let i = 0; i < 3; i++) {\n      const response = await openai.createCompletion({\n        model: \"text-davinci-002\",\n        prompt: `${prompt.text}`,\n        max_tokens: 15\n      }); // This is how you access the response from the API\n\n      aiText.push(response.data.choices[0].text);\n    }\n\n    setResponses(aiText);\n    console.log(responses);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"gpt3__header gpt3__header-padding\",\n    id: \"home\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__header-content\",\n      children: [/*#__PURE__*/_jsxDEV(Greeting, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gpt3__header-content__input\",\n        children: /*#__PURE__*/_jsxDEV(\"form\", {\n          autoComplete: \"off\",\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            name: \"prompt\",\n            placeholder: \"Enter a prompt\",\n            value: prompt.text,\n            onChange: e => setPrompt({ ...prompt,\n              text: e.target.value\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            children: \"Magic Stuff\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"gpt3__header-image\",\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: possibilityImage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), responses.map(() => /*#__PURE__*/_jsxDEV(Response, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Header, \"1WHLKvN2oAjFjwukvyoHVMLp9nY=\");\n\n_c = Header;\nexport default Header;\n\nvar _c;\n\n$RefreshReg$(_c, \"Header\");","map":{"version":3,"sources":["/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/containers/header/Header.jsx"],"names":["React","useState","Configuration","OpenAIApi","Greeting","Response","Header","prompt","setPrompt","text","responses","setResponses","handleSubmit","e","preventDefault","configuration","apiKey","process","env","REACT_APP_OPENAI_API_KEY","openai","aiText","i","response","createCompletion","model","max_tokens","push","data","choices","console","log","target","value","possibilityImage","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAT,EAAwBC,SAAxB,QAAyC,QAAzC;AACA,OAAOC,QAAP,MAAqB,oCAArB;AACA,OAAOC,QAAP,MAAqB,oCAArB;;AAGA,OAAO,cAAP;;;AAEA,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACnB,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBP,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAE;AAAR,GAAD,CAApC;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BV,QAAQ,CAAC,EAAD,CAA1C;AAEA;;AACA;;AACA,QAAMW,YAAY,GAAG,MAAOC,CAAP,IAAa;AAChCA,IAAAA,CAAC,CAACC,cAAF;AAEA,UAAMC,aAAa,GAAG,IAAIb,aAAJ,CAAkB;AACtC;AACAc,MAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC;AAFkB,KAAlB,CAAtB;AAKA,UAAMC,MAAM,GAAG,IAAIjB,SAAJ,CAAcY,aAAd,CAAf;AACA,UAAMM,MAAM,GAAG,EAAf;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,EAAxB,EAA4B;AAC1B,YAAMC,QAAQ,GAAG,MAAMH,MAAM,CAACI,gBAAP,CAAwB;AAC7CC,QAAAA,KAAK,EAAE,kBADsC;AAE7ClB,QAAAA,MAAM,EAAG,GAAEA,MAAM,CAACE,IAAK,EAFsB;AAG7CiB,QAAAA,UAAU,EAAE;AAHiC,OAAxB,CAAvB,CAD0B,CAM1B;;AACAL,MAAAA,MAAM,CAACM,IAAP,CAAYJ,QAAQ,CAACK,IAAT,CAAcC,OAAd,CAAsB,CAAtB,EAAyBpB,IAArC;AACD;;AACDE,IAAAA,YAAY,CAACU,MAAD,CAAZ;AACAS,IAAAA,OAAO,CAACC,GAAR,CAAYrB,SAAZ;AACD,GArBD;;AAsBA,sBACE;AAAK,IAAA,SAAS,EAAC,mCAAf;AAAmD,IAAA,EAAE,EAAC,MAAtD;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,sBAAf;AAAA,8BACE,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAK,QAAA,SAAS,EAAC,6BAAf;AAAA,+BACE;AAAM,UAAA,YAAY,EAAC,KAAnB;AAAyB,UAAA,QAAQ,EAAEE,YAAnC;AAAA,kCACE;AACE,YAAA,IAAI,EAAC,MADP;AAEE,YAAA,IAAI,EAAC,QAFP;AAGE,YAAA,WAAW,EAAC,gBAHd;AAIE,YAAA,KAAK,EAAEL,MAAM,CAACE,IAJhB;AAKE,YAAA,QAAQ,EAAGI,CAAD,IAAOL,SAAS,CAAC,EAAE,GAAGD,MAAL;AAAaE,cAAAA,IAAI,EAAEI,CAAC,CAACmB,MAAF,CAASC;AAA5B,aAAD;AAL5B;AAAA;AAAA;AAAA;AAAA,kBADF,eAQE;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBARF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAiBE;AAAK,MAAA,SAAS,EAAC,oBAAf;AAAA,8BACE;AAAK,QAAA,GAAG,EAAEC;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,EAGGxB,SAAS,CAACyB,GAAV,CAAc,mBACb,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,cADD,CAHH;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA2BD,CAvDD;;GAAM7B,M;;KAAAA,M;AAyDN,eAAeA,MAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Configuration, OpenAIApi } from \"openai\";\nimport Greeting from \"../../components/greeting/Greeting\";\nimport Response from \"../../components/response/Response\";\n\nimport possibilityImage from \"../../assets/header.svg\";\nimport \"./header.css\";\n\nconst Header = () => {\n  const [prompt, setPrompt] = useState({ text: \"\" });\n  const [responses, setResponses] = useState([]);\n\n  /* eslint-disable no-plusplus */\n  /* eslint-disable no-await-in-loop */\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    const configuration = new Configuration({\n      // Set up API Key in config for actual project\n      apiKey: process.env.REACT_APP_OPENAI_API_KEY,\n    });\n\n    const openai = new OpenAIApi(configuration);\n    const aiText = [];\n    for (let i = 0; i < 3; i++) {\n      const response = await openai.createCompletion({\n        model: \"text-davinci-002\",\n        prompt: `${prompt.text}`,\n        max_tokens: 15,\n      });\n      // This is how you access the response from the API\n      aiText.push(response.data.choices[0].text);\n    }\n    setResponses(aiText);\n    console.log(responses);\n  };\n  return (\n    <div className=\"gpt3__header gpt3__header-padding\" id=\"home\">\n      <div className=\"gpt3__header-content\">\n        <Greeting />\n        <div className=\"gpt3__header-content__input\">\n          <form autoComplete=\"off\" onSubmit={handleSubmit}>\n            <input\n              type=\"text\"\n              name=\"prompt\"\n              placeholder=\"Enter a prompt\"\n              value={prompt.text}\n              onChange={(e) => setPrompt({ ...prompt, text: e.target.value })}\n            />\n            <button type=\"submit\">Magic Stuff</button>\n          </form>\n        </div>\n      </div>\n\n      <div className=\"gpt3__header-image\">\n        <img src={possibilityImage} />\n        {/* data  */}\n        {responses.map(() => (\n          <Response />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n"]},"metadata":{},"sourceType":"module"}