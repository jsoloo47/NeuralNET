{"ast":null,"code":"var _jsxFileName = \"/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/components/typewriter/Typewriter.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typewriter = ({\n  text\n}) => {\n  _s();\n\n  const prompt = useRef(0);\n  const [currentText, setCurrentText] = useState(\"\");\n  const [index, setIndex] = useStare(0);\n\n  if (index < text.length) {\n    if (prompt.current + 1 === text[index].length) {\n      setIndex(curr => curr += 1);\n      index += 1;\n      console.log(\"updated index\");\n    }\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      prompt.current = 0;\n      setCurrentText(\"\");\n    }, 3000);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [index]);\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (index < text.length) {\n        if (prompt.current < text[index].length) {\n          setCurrentText(value => value + text[index][prompt.current]);\n          prompt.current += 1;\n          console.log(index, prompt.current);\n        }\n      }\n    }, 100);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [currentText]);\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: currentText\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 10\n  }, this);\n};\n\n_s(Typewriter, \"MRPOgS423yEnFCsCltdjjIRVSE4=\", true);\n\n_c = Typewriter;\nexport default Typewriter;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typewriter\");","map":{"version":3,"sources":["/Users/juansolano/Desktop/Portfolio/Learning-Projects/gpt3-development/src/components/typewriter/Typewriter.jsx"],"names":["React","useEffect","useState","useRef","Typewriter","text","prompt","currentText","setCurrentText","index","setIndex","useStare","length","current","curr","console","log","timeoutId","setTimeout","clearTimeout","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;;;AAEA,MAAMC,UAAU,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAc;AAAA;;AAC/B,QAAMC,MAAM,GAAGH,MAAM,CAAC,CAAD,CAArB;AAEA,QAAM,CAACI,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACO,KAAD,EAAQC,QAAR,IAAoBC,QAAQ,CAAC,CAAD,CAAlC;;AAEA,MAAIF,KAAK,GAAGJ,IAAI,CAACO,MAAjB,EAAyB;AACvB,QAAIN,MAAM,CAACO,OAAP,GAAiB,CAAjB,KAAuBR,IAAI,CAACI,KAAD,CAAJ,CAAYG,MAAvC,EAA+C;AAC7CF,MAAAA,QAAQ,CAAEI,IAAD,IAAWA,IAAI,IAAI,CAApB,CAAR;AACAL,MAAAA,KAAK,IAAI,CAAT;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ;AACD;AACF;;AAEDf,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAGC,UAAU,CAAC,MAAM;AACjCZ,MAAAA,MAAM,CAACO,OAAP,GAAiB,CAAjB;AACAL,MAAAA,cAAc,CAAC,EAAD,CAAd;AACD,KAH2B,EAGzB,IAHyB,CAA5B;AAIA,WAAO,MAAM;AACXW,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,KAFD;AAGD,GARQ,EAQN,CAACR,KAAD,CARM,CAAT;AAUAR,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMgB,SAAS,GAAGC,UAAU,CAAC,MAAM;AACjC,UAAIT,KAAK,GAAGJ,IAAI,CAACO,MAAjB,EAAyB;AACvB,YAAIN,MAAM,CAACO,OAAP,GAAiBR,IAAI,CAACI,KAAD,CAAJ,CAAYG,MAAjC,EAAyC;AACvCJ,UAAAA,cAAc,CAAEY,KAAD,IAAWA,KAAK,GAAGf,IAAI,CAACI,KAAD,CAAJ,CAAYH,MAAM,CAACO,OAAnB,CAApB,CAAd;AACAP,UAAAA,MAAM,CAACO,OAAP,IAAkB,CAAlB;AACAE,UAAAA,OAAO,CAACC,GAAR,CAAYP,KAAZ,EAAmBH,MAAM,CAACO,OAA1B;AACD;AACF;AACF,KAR2B,EAQzB,GARyB,CAA5B;AASA,WAAO,MAAM;AACXM,MAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,KAFD;AAGD,GAbQ,EAaN,CAACV,WAAD,CAbM,CAAT;AAcA,sBAAO;AAAA,cAAIA;AAAJ;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CAvCD;;GAAMH,U;;KAAAA,U;AAwCN,eAAeA,UAAf","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\n\nconst Typewriter = ({ text }) => {\n  const prompt = useRef(0);\n\n  const [currentText, setCurrentText] = useState(\"\");\n  const [index, setIndex] = useStare(0);\n\n  if (index < text.length) {\n    if (prompt.current + 1 === text[index].length) {\n      setIndex((curr) => (curr += 1));\n      index += 1;\n      console.log(\"updated index\");\n    }\n  }\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      prompt.current = 0;\n      setCurrentText(\"\");\n    }, 3000);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [index]);\n\n  useEffect(() => {\n    const timeoutId = setTimeout(() => {\n      if (index < text.length) {\n        if (prompt.current < text[index].length) {\n          setCurrentText((value) => value + text[index][prompt.current]);\n          prompt.current += 1;\n          console.log(index, prompt.current);\n        }\n      }\n    }, 100);\n    return () => {\n      clearTimeout(timeoutId);\n    };\n  }, [currentText]);\n  return <p>{currentText}</p>;\n};\nexport default Typewriter;\n"]},"metadata":{},"sourceType":"module"}